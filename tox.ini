[tox]
# Default environments to run with vanilla `tox`
envlist = py, lint

[testenv]
# Required to be able to send coverage reports from Travis to codecov
passenv = PYTHONWARNINGS TOXENV CI TRAVIS TRAVIS_*
usedevelop = true
deps =
    pytest
    pytest-cov
    # not a real dependency, but used if available <3
    Pygments
commands =
    pytest . {posargs}
    {envpython} -V -V

[testenv:flake8]
skip_install = true
deps =
    flake8
    flake8-docstrings
    flake8-import-order
    pep8-naming
    pytest-flake8
commands =
    flake8 --version
    pytest --flake8 -m flake8 ci_exec/ demos/ docs/ tests/

[testenv:mypy]
skip_install = true
deps =
    mypy
    pytest-mypy
commands =
    mypy --version
    pytest --mypy -m mypy ci_exec/ demos/ docs/ tests/

[testenv:lint]
skip_install = true
deps =
    {[testenv:flake8]deps}
    {[testenv:mypy]deps}
commands =
    {[testenv:flake8]commands}
    {[testenv:mypy]commands}

[testenv:demos]
passenv = TERM
# In order to get coverage from the demos, we need to inform `python` invokations to
# actually run `coverage`.
setenv =
    CI_EXEC_DEMOS_COVERAGE = YES
skip_install = true
deps =
    coverage
commands =
    # We have to run coverage in append mode (both here and in demos/__main__.py),
    # otherwise things will overwrite.  Expected usage in the CI runs is:
    #     tox -e demos -- <demo name>
    #     tox -e demos -- <demo name> --animate
    # So append is useful to get full coverage in both scenarios (running with / without
    # the --animate flag, as well as nested subprocess calls to the actual demo from
    # within the shell "programs" in demos/__main__.py).
    #
    # The implication: this coverage file gets deleted when you run `tox -e py`, but
    # will append to the results of `tox -e py` if you do `tox -e demos` afterward.  For
    # the actual coverage gathering this isn't a big deal since they are run in separate
    # CI build machines.  It's just worth being explicit how / why this works this way.
    coverage run -a demos/ {posargs}

[testenv:docs]
deps =
    -rdocs/requirements.txt
commands =
    sphinx-build -W -n -b html -d {envtmpdir}/doctrees docs/source {envtmpdir}/html

[testenv:linkcheck]
deps =
    -rdocs/requirements.txt
commands =
    sphinx-build -W -n -b linkcheck -d {envtmpdir}/doctrees docs/source {envtmpdir}/linkcheck

[testenv:dist]
skip_install = true
deps =
    readme_renderer
commands =
    # Checks RST for uploading to PyPi
    {envpython} setup.py check -r -s
    {envpython} setup.py sdist
    {envpython} setup.py bdist_wheel --universal

# Not exactly a typical thing to do with tox...but suits my workflow.
[testenv:clean]
skip_install = true
deps =
whitelist_externals =
    find
    rm
commands =
    rm -f .coverage
    rm -rf build/
    rm -rf dist/
    rm -rf ci_exec.egg-info/
    rm -rf .eggs/
    rm -rf tests/.cache
    rm -rf .mypy_cache
    find . -name "*.py[co]" -type f -exec rm -f \{\} +
    find . -name "__pycache__" -type d -exec rm -rf \{\} +
